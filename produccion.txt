@Punto q funci贸n main
program ::= 'void' 'main' '(' ')' '\' block '/'

block ::= (stmt | decl)*
op_rel ::= '<' | '<=' | '>' | '>=' | '==' | '!='
op_log ::= '^' | '#' | '!'

@ Punto J, Expresiones l贸gicas
exp_log ::= exp op_log exp | exp op_log exp | op_log exp


@ Punto K Delimitador ;
stmt ::= exp '?'
        | assign
        | decl_var
        | ctrl
        | break
        | return
        | read
        | write
 
@ Punto I Combinaci贸n de expresiones
exp_comb ::= exp_arit 
	     | exp_rel 
	     | exp_log 
             | exp_arit op_rel exp_arit
	     | exp_log op_log exp_log

@Punto m tipado explicito y fuerte
decl_var ::= tipo id '|' exp '?'
	    | tipo id '?'
	    | tipo_arr id '?'

tipo ::= 'int' | 'float' | 'bool' | 'char' | 'string'


@Punto n Estructuras de control
ctrl ::= if | do_while | for

if ::= 'if' '(' exp_bool ')' '\' block '/'
	('elif' '(' exp_bool ')' '\' block '/')*
	('else' '\' block '/')?

do_while ::= 'do' '\' block '/' 'while' '(' exp_bool ')' '?'

for ::= 'for' '(' decl_var? '?' exp_bool? '?' exp? ')'
	'\' block '/'

break ::= 'break' '?'

return ::= 'return' exp? '?'

exp_bool ::= exp_rel
	    | exp_log
	    | 'true'
	    | 'false'

@Punto o Funciones de entrada y salida
read ::= 'read' '(' t_entry ')' '?'

t_entry ::= 'int'
	    |'float'

write ::= 'write' '(' exp_out ')' '?'

exp_out ::= lit
	 | id
	 | exp

@Punto p Declaraci贸n de funciones
decl_fun ::= tipo_r id '(' param? ')' '\' block '/'

tipo_r ::= 'int' | 'float' | 'char' | 'bool' | 'void'

param ::= tipo id (',' tipo id)*


@ Punto R, Comentarios
comment ::= '@' loIgnora '\n'
comment_block ::= '{' loIgnora '}'


