program = estructura del programa
block = bloques de código
decl = declaración de variables y funciones
stmt = sentencias de código
exp = expresiones generales
ctrl = estructuras de control

exp_log ::= exp '^' exp | exp '#' exp | '!' exp

stmt ::= exp '?' | decl | ctrl

exp_comb ::= exp_arit 
	     | exp_rel 
	     | exp_log 
             | exp_arit op exp_arit
	     | exp_log op exp_log

decl_var ::= tipo id '|' exp '?'
	    | tipo id '?'

tipo ::= 'int' | 'float' | 'bool' | 'char' | 'string'

ctrl ::= if | do_while | for

if ::= 'if' '(' exp_bool ')' '\' block '/'
	('elif' '(' exp_bool ')' '\' block '/')*
	('else' '\' block '/')?

do_while ::= 'do' '\' block '/' 'while' '(' exp_bool ')' '?'

for ::= 'for' '(' decl_var? '?' exp_bool? '?' exp? ')'
	'\' block '/'

break ::= 'break' '?'

return ::= 'return' exp? '?'

exp_bool ::= exp_rel
	    | exp_log
	    | 'true'
	    | 'false'

read ::= 'read' '(' t_entry ')' '?'

t_entry ::= 'int'
	    | 'float'

write ::= 'write' '(' exp_out ')' '?'

exp_out ::= lit
	 | id
	 | exp

decl_fun ::= tipo_r id '(' param? ')' '\' block '/'

tipo_r ::= 'int' | 'float' | 'char' | 'bool' | 'void'

param ::= tipo id (',' tipo id)*

program ::= 'void' 'main' '(' ')' '\' block '/'

comment ::= '@' loIgnora '\n'
comment_block ::= '{' loIgnora '}'


